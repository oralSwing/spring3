<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 确定增强的目标 -->
	<bean id="customerService" class="cn.itcast.spring.a_proxy.CustomerServiceImpl"/>
	<bean id="productService" class="cn.itcast.spring.a_proxy.ProductService"/>
	
	<!-- Advice通知增强（自己写增强代码） -->
	<bean id="myAdvice" class="cn.itcast.spring.c_aspectj.MyAspect"></bean>
	
	<!-- aop的配置（切入点和切面） -->
	<aop:config proxy-target-class="true">
		<!-- 切入点 
		within():配置哪个包下面的类的所有方法（无法指定单独的方法）
		-->
		<!-- <aop:pointcut expression="within(cn.itcast.spring..*)" id="myPointcut"/> -->
		<!-- 配置切面 -->
		<!-- aspectj的配置
		ref：直接配置通知
		 -->
		<aop:aspect ref="myAdvice">
			<!-- 可以将切入点配置到 aop:aspect切面标签中-->
			<aop:pointcut expression="within(cn.itcast.spring..*)" id="myPointcut"/>
		
			<!-- 
			method:指定通知中的方法，该增强要调用哪个方法
			 -->
			<!-- <aop:before method="before1" pointcut-ref="myPointcut"/>
			<aop:before method="before1" pointcut-ref="myPointcut"/>
			<aop:before method="before2" pointcut-ref="myPointcut"/> -->
			<!-- 前置增强 -->
			<!-- <aop:before method="before" pointcut-ref="myPointcut"/> -->
			<!-- 后置增强 
			returning:必须对应方法的第二个参数名！在增强的时候，spring会自动将目标对象的返回值，放入这个名字的参数中。，名字必须对应！！！
			-->
			<!-- <aop:after-returning method="afterReturing" returning="returnVal" pointcut-ref="myPointcut"/> -->
			<!-- 环绕通知 -->
			<!-- <aop:around method="around" pointcut-ref="myPointcut"/> -->
			<!-- 异常通知 -->
			<!-- throwing被调用的方法中的参数的名字（参数是对应Throwable类型的） -->
			<!-- <aop:after-throwing method="afterThrowing" throwing="ex" pointcut-ref="myPointcut"/> -->
			<!-- 最终通知 -->
			<aop:after method="after" pointcut-ref="myPointcut"/>
			<!-- 
			配置切面的时候，同时写切入点表达式 
			pointcut:相当于直接写切入点表达式了。
			-->
			<!-- <aop:before method="" pointcut="bean(*Service)"/> -->
		</aop:aspect>
	
	</aop:config>


</beans>